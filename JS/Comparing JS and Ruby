Take a look at these two snippets of code:
Ruby: https://repl.it/CANP/1
JS: https://repl.it/CANO/3

Ruby and JavaScript have a lot in common. Here's a quick, and hopefully comforting, list:

Strings, booleans, and integers are alive and well in JavaScript.
Many operators, such as * and /, work the way you would expect on integers. You can add strings together much as you would in Ruby.
You can use comparison operators such as < and >= on integers.
Boolean operators such as && and || work similarly.
JavaScript and Ruby share many similar components, like if/else statements, arrays, and methods (referred to as functions in JavaScript).
This challenge is about exploring the differences between JavaScript and Ruby. With that in mind, you'll work through several code snippets on repl.it
(which can run JavaScript, too!). Take your time when exploring the code, and add some code if you'd like to test a theory.

You can take notes on your discoveries if you like, but you won't be turning anything in for these releases, with the exception of the last one.

What is the equivalent of nil in JavaScript?
When you declare variables in JavaScript, it's a good idea to use the var keyword (you can Google it if you're interested, 
or just take our word for it). We can see other differences as well: how is the naming convention in JavaScript different from Ruby?
How do you print a variable in JavaScript?
How do you end a line of code in JavaScript?
How do you write comments in JavaScript?

Ruby:https://repl.it/CANT
JS: https://repl.it/CANS

How are functions declared in JavaScript? Try declaring a different function and calling it.
Do JavaScript functions have implicit return? (What happens when you remove the return keyword from the add function?
Notice that the declaration of the sayHello function has parentheses, even though sayHello doesn't take any parameters.
Are those necessary? What happens if you remove them?
In Ruby, there's no need to use parentheses on a method call if you don't need to pass any arguments to the function.
In the JavaScript version, does the code inside sayHello still execute if you remove the parentheses from the function call?


Ruby: https://repl.it/CANU
JS: https://repl.it/CANV/1
Whoa, this is a lot different! In JavaScript, this construct is called a for loop, which exists in lots of other programming 
languages as well (C and Python, for instance). Ruby is actually the odd language in this regard.

Inside the parentheses of the for loop, we see three statements separated by semicolons. 
Each of these has a purpose in controlling the behavior of the loop.

First, we set our counter to 0:

var i = 0
Then we set what you might think of as our "while" condition -- the loop will keep running as long as this is true:

i < str.length
Then we tell our counter to increment by 1 using a fancy JavaScript operator:

i++
The above statement is equivalent to i+=1, and either one would work.

This is convenient, because we don't have to remember to increment our counter by 1 each time -- JavaScript will do it for us 
thanks to this statement.

Now that you understand the purpose of each statement in the for declaration, can you declare another loop that counts
to 10 and logs each number to the console? Try to reason through it rather than Googling the answer.
What happens if you change the i++ statement in a loop to i+=2?
Can you figure out how to count down from 10 instead? Try to reason through it instead of Googling, 
though you can look it up if you have to. Either way, now you know how to loop backward!
Notice that unlike with .each in Ruby, we don't get to pass in a handy block parameter that gives the same 
name to each item in turn. We have to use i, which is available inside the body of the loop, to access the item within the loop.

